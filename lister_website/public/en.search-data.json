{"/about/":{"data":{"":"This is the about page."},"title":"About"},"/documents/":{"data":{"":"Welcome to the Lister 3D Printer documentation. Here you‚Äôll find comprehensive guides and documentation to help you get started with your Lister 3D printer.","quick-navigation#Quick Navigation":"üöÄ Getting Started Introduction Getting Started Guide Key Differences Terminology üîß Hardware \u0026 Components H2 Extruder 0.5mm Nozzle Guide Parts Layout Specifications üíª Software \u0026 Configuration Klipper Setup Moonraker Configuration üìö Advanced Topics Hygroscopic Materials Guide üîç Support Troubleshooting "},"title":"Documentation Index"},"/documents/05mm_nozzle/":{"data":{"-comprehensive-speed-matrix#üéØ Comprehensive Speed Matrix":"Layer heights: 0.1mm to 0.4mm Extrusion widths: 0.3mm to 0.65mm\nLayer Height 0.3mm width 0.4mm width 0.5mm width 0.6mm width 0.65mm width 0.1mm 333.3 250.0 200.0 166.7 153.8 0.2mm 166.7 125.0 100.0 83.3 76.9 0.3mm 111.1 83.3 66.7 55.6 51.3 0.4mm 83.3 62.5 50.0 41.7 38.5 ","-maximum-speed-charts#üìä Maximum Speed Charts":"A. Outer Perimeter (0.4mm width) Layer Height Max Speed 0.1mm 250 mm/s 0.2mm 125 mm/s 0.3mm 83.3 mm/s 0.4mm 62.5 mm/s B. Internal/Infill (0.55mm width) Layer Height Max Speed 0.1mm 181.8 mm/s 0.2mm 90.9 mm/s 0.3mm 60.6 mm/s 0.4mm 45.5 mm/s ","-practical-considerations#üõ†Ô∏è Practical Considerations":"Extrusion Width Guidelines Thin LinesStandard LinesWide Lines 0.3-0.4mm Width\n‚úÖ Ideal for fine details ‚úÖ Better for outer perimeters ‚úÖ Enables higher speeds ‚ö†Ô∏è Less structural strength 0.4-0.5mm Width\n‚úÖ Balanced quality and strength ‚úÖ Perfect for standard prints ‚úÖ Good layer adhesion ‚úÖ Versatile for most applications 0.5-0.65mm Width\n‚úÖ Excellent for infill ‚úÖ Maximum strength ‚úÖ Best layer adhesion ‚ö†Ô∏è Slower print speeds required üéØ Optimal Combinations ‚ö†Ô∏è Remember that these are theoretical maximums at 10mm¬≥/s. Real-world speeds will be lower due to various factors. Fine Detail Printing\nWidth: 0.3mm Height: 0.1mm Use Case: Miniatures, artistic prints Standard Quality\nWidth: 0.4-0.5mm Height: 0.2mm Use Case: General purpose prints Speed/Strength Focus\nWidth: 0.6-0.65mm Height: 0.3mm Use Case: Functional parts ‚ö†Ô∏è Real-World Limitations Consider these factors when setting actual print speeds:\nCooling requirements for different materials Corner acceleration limits Layer adhesion quality Mechanical printer limitations ","-volumetric-flow-calculations#üîÑ Volumetric Flow Calculations":"Base Flow Rate The Bigtreetech H2 V2S extruder has a maximum volumetric flow rate of:\n600 mm¬≥/min = 10 mm¬≥/s Speed Formula Max Speed = Volumetric Flow Rate √∑ (Layer Height √ó Extrusion Width) ","05mm-nozzle-specifications-#0.5mm Nozzle Specifications üéØ":"0.5mm Nozzle Specifications üéØ","navigation#Navigation":" Getting StartedNew to Lister? Start here with our comprehensive setup guide. SpecificationsDetailed technical specifications of the Lister 3D printer. TroubleshootingCommon issues and their solutions. ","why-05mm-our-testing-journey#Why 0.5mm? Our Testing Journey":"After extensive testing with various nozzle sizes, we discovered that the 0.5mm nozzle provides an optimal balance between quality, strength, and speed. Here‚Äôs why:\n‚ÑπÔ∏è While testing the 0.6mm nozzle with PrusaSlicer‚Äôs Arachne engine, we found that the 0.5mm nozzle offers better versatility, allowing for line widths from 0.4mm to 0.65mm from a single nozzle size. The 0.6mm nozzle was less effective at producing thinner 0.4mm lines. "},"title":"0.5mm Nozzle Guide"},"/documents/getting_started/":{"data":{"":"","bed-leveling#Bed Leveling":"Manual Bed Adjustment Before starting your first print, it‚Äôs crucial to ensure your print bed is properly leveled. The Lister 3D printer includes a helpful macro called BED_PROBE_MANUAL_ADJUST to assist you with this process.\nUsing BED_PROBE_MANUAL_ADJUST In the Mainsail interface, locate the ‚ÄúMACROS‚Äù section in the main control panel. Find and click on the BED_PROBE_MANUAL_ADJUST button. The printer will begin the bed leveling process: It will home all axes if they aren‚Äôt already homed. The probe will measure multiple points on the bed. Mainsail will display the results in the main control panel. Interpreting the Results After the probing is complete, you‚Äôll see a visualization of the bed‚Äôs tilt in the Mainsail interface. This will typically appear as a grid or a set of values corresponding to different points on the bed.\nThe numbers represent the deviation from a perfectly flat bed in millimeters. Positive numbers indicate that the bed is too high at that point. Negative numbers indicate that the bed is too low at that point. Adjusting the Bed Based on the results:\nIdentify the corners that need adjustment. Use the bed leveling screws located under the bed to make adjustments: If a corner shows a positive number, turn the corresponding screw clockwise to lower that corner. If a corner shows a negative number, turn the corresponding screw counterclockwise to raise that corner. Make small adjustments (about 1/8 to 1/4 turn) at a time. After adjusting, run the BED_PROBE_MANUAL_ADJUST macro again to check your progress. Repeat the process until all points are as close to zero as possible (typically within ¬±0.05mm). Important Notes This manual adjustment is crucial for achieving optimal first layer adhesion and overall print quality. It‚Äôs recommended to perform this adjustment periodically or after any significant changes to your printer setup. If you‚Äôre having persistent issues with bed leveling, please consult the troubleshooting section of this manual or contact support. By ensuring your bed is properly leveled using the BED_PROBE_MANUAL_ADJUST macro, you‚Äôre setting a strong foundation for successful, high-quality prints with your Lister 3D printer.","conclusion#Conclusion":"The CWE3D Lister 3D printer is engineered for users who prioritize reliability, ease of use, and consistent results over extreme speed or specialized high-temperature materials. It‚Äôs ideal for educational settings, engineering prototyping, and hobbyists who need dependable performance with a wide range of standard and engineering filaments.\nWhile it may not be suitable for all applications, particularly those requiring enclosed printing environments or extremely high-temperature materials, the Lister excels in its intended use cases. It offers a balance of quality, reliability, and versatility for the majority of 3D printing needs.\nWe encourage users to explore the capabilities of this printer and engage with our community for support, modifications, and shared experiences. The Lister is more than just a printer; it‚Äôs a platform for creativity and engineering problem-solving.","establishing-a-connection#Establishing a Connection":"Your Lister 3D printer runs on RatOS, a Linux-based operating system. RatOS broadcasts a Wi-Fi access point and can also accept wired network connections.\nAfter powering on both the 220V and 24V switches, allow 1-2 minutes for the system to fully boot. You can then connect using one of two methods:\nWi-Fi Connection Wired Ethernet Connection (faster and more reliable) Wi-Fi Connection On your Wi-Fi-enabled device, look for a network named similar to: printername.local (e.g., ionflux.local, cwe3d.local) RatOS or ratos.local Connect using the default password: raspberry Open a web browser and navigate to the printer‚Äôs local domain: http://printername.local, http://RatOS.local, http://cwe3d.local, etc. To set up your personal Wi-Fi network: Browse to http://printername.local/configure Find your Wi-Fi network and enter your password On the next screen, you can customize the printer‚Äôs domain name Wired Ethernet Connection Connect an Ethernet cable between your printer and your network Open a web browser and navigate to: http://printername.local, http://RatOS.local, http://cwe3d.local, etc. If you only used the Ethernet connection temporarily, you can follow the Wi-Fi setup steps to enable wireless connectivity. After completing these steps, you‚Äôll have full access to your Lister 3D printer‚Äôs web interface for monitoring and control.","just-received-your-printer#Just received your printer?":"Thank you for supporting us. We hope that this machine will be a valuable attribute to your 3D printing needs. The Lister is designed to exceed required specifications in many areas, helping it to last as long as possible.\nEach printer undergoes hours and days of tuning, with every single part quality checked to a measured level. While transit can be tough for a machine of its size and weight, we continually work to improve our packaging so the printer arrives in pristine condition.\nUnboxing Carefully unscrew the entire wooden protective structure surrounding the printer before attempting to lift it out. This precaution prevents damage to small components like the runout sensor and stops the gantry from catching on the top box storage structure. Once the printer is free from its packaging, place it on a sturdy, level surface capable of supporting its weight. Inspection Examine the XY gantry for any obstructions. Gently move the gantry using the designated handle, ensuring it moves freely and smoothly along both axes. Conduct a thorough visual inspection for any obvious damage: Check all corners and edges for signs of impact or breakage Verify that all belts are correctly seated on their respective idler pulleys Look for any other signs of damage or misalignment Ensure the power cable running to the heated bed is not trapped behind a leg or obstructed in any way. If you discover any damage that appears to have occurred during shipping, please contact our support team immediately for assistance. ","powering-up-your-printer#Powering Up Your Printer":"It‚Äôs time to power up your Lister 3D printer. The main power switch is located where the power cord enters the machine.\nMain 220V Switch Powers: The Raspberry Pi (always-on microcomputer) All other printer components Important: Never abruptly cut power using this switch. Doing so can interrupt the Raspberry Pi, potentially corrupting the Micro SD card. Always shut down properly via the Web Interface (detailed instructions provided later).\nMain Board 24V Switch This switch powers the 24V Bigtreetech SKR Pro V1.2 control board."},"title":"Getting Started"},"/documents/h2_extruder/":{"data":{"":"","specifications-of-the-bigtreetech-biqu-h2-v2s-extruder#Specifications of the Bigtreetech BIQU H2 V2S Extruder":"The BIQU H2 V2S is a direct drive extruder designed for various 3D printers, notable for its lightweight construction and advanced features. Below are its key specifications:\nGeneral Features Extrusion Method: Dual gear extrusion Maximum Extrusion Force: 7.5 kg (varies with filament type) Extrusion Rate: 600 mm¬≥/min (dependent on filament) 10 mm¬≥/s volumetric flow rate Weight: 195 g (includes heating block, thermistor, and fan) Compatibility: Works with multiple 3D printers like BIQU B1, Ender 3 series, CR series, and others. Temperature and Materials Maximum Printing Temperature: 270¬∞C (upgradeable to 500¬∞C) Compatible Filaments: PLA, ABS, TPU, Nylon, PETG, and more. Mechanical Features Gear Ratio: 7:1 for enhanced pushing force Drive Gear Circumference: 24.5 mm E-step Value: 932/mm at 16 microsteps (calibration recommended) Klipper Rotation Distance: 3.433 Recommended Motor Current: 800 mA Thermal Management Heater Cartridge Power: 40W Heater Cartridge Voltage: 24V Thermistor Type: NTC100K Cooling System: Optimized heatsink design for improved airflow and heat dissipation. Construction Materials Body Material: Made from 6061 T6 aluminum alloy for durability. Throat Pipe Material: High-quality titanium-copper alloy for better heat resistance and dissipation. Gear Material: Upgraded stainless steel gears to prevent jamming. Package Contents The package includes:\nOne pre-assembled BIQU H2 V2S extruder Cooling fan Necessary cables and screws This extruder is designed to provide efficient performance while maintaining compatibility across a wide range of printer models, making it a versatile choice for both hobbyists and professionals in the 3D printing community[1][2][4].\nCitations: [1] https://novo3d.in/biqu-h2/ [2] https://www.amazon.com/Extruder-Creality-Anycubic-Geeetech-Printers/dp/B09JWDDZP5 [3] https://www.aliexpress.com/i/1005002027208144.html [4] https://biqu.equipment/products/biqu-h2-v2s-extruder-for-b1-bx-ender-3-3-v2-5-6-cr6-10 [5] https://www.diyelectronics.co.za/store/bodies/4904-biqu-h2-v2s-direct-drive-extruder-hotend-kit.html [6] https://biqu.equipment/products/biqu-h2-v2-0-extruder [7] https://www.diyelectronics.co.za/store/heater-blocks/5635-biqu-high-flow-heating-block-for-h2-v2s-lite-extruder.html [8] https://3dbro.com.au/product/biqu-h2-v2s-lite-extruder/\nSpecificationsDetailed technical specifications of the Lister 3D printer. Parts LayoutComplete directory of all printer parts and their locations. TroubleshootingCommon issues and their solutions. "},"title":"H2 Extruder"},"/documents/hygroscopic/":{"data":{"conclusion#\u003cstrong\u003eConclusion\u003c/strong\u003e":"","conclusion-1#\u003cstrong\u003eConclusion\u003c/strong\u003e":"Drying 3D Printer Filaments: A Comprehensive GuideIntroduction One of the most important aspects of achieving high-quality 3D prints is ensuring that your filament is properly dried. Moisture-filled filament can lead to a variety of print issues that affect both the mechanical properties and the visual quality of your prints. This document will cover the drying process for common filaments like PLA and PETG, explain what happens when filaments absorb moisture, and rank the hygroscopicity (tendency to absorb moisture) of different filament types.\nWhy Dry Filament Is Crucial Filament absorbs moisture from the air over time, especially in humid environments. When filament with excess moisture is heated during printing, the water in the filament turns to steam, causing several undesirable effects:\nStringing: Thin strands of filament are left between parts of the print due to water vapor escaping. Popping or Bubbling: Steam bubbles form inside the extruder, leading to inconsistent extrusion. Poor Layer Adhesion: The presence of moisture can weaken layer bonding, making prints more fragile. Surface Imperfections: Prints may have rough or uneven surfaces due to steam escaping during extrusion. Dimensional Inaccuracy: The expansion and contraction caused by steam can distort the final dimensions of your print. In short, drying filament is essential for producing high-quality prints, as wet filament will lead to poor performance and visual defects.\nDrying PETG Filament Recommended Drying Temperatures PETG is a moderately hygroscopic material and should be dried before printing if it has absorbed moisture. The typical drying temperature for PETG falls between 55¬∞C and 70¬∞C. However, drying at lower temperatures over extended periods can also work.\nStandard Drying Temperature: 60¬∞C - 65¬∞C for 4-6 hours. Extended Drying: PETG can be dried at 50¬∞C for longer periods (e.g., 12 hours or more). Drying at Lower Temperatures While PETG dries best at around 60¬∞C, it can still dry effectively at 50¬∞C, but it will take longer (up to 12 hours or more). Drying PETG at lower temperatures is useful if you want to avoid any risk of overheating or deforming the filament.\nWhat Happens If PETG Is Wet? When PETG absorbs moisture, it exhibits several issues during printing:\nStringing: Excessive stringing between parts due to water vapor escaping. Popping Sounds: Audible popping as steam escapes from the nozzle. Surface Imperfections: Rough or pitted surfaces on printed parts. Weaker Prints: Reduced layer adhesion and overall strength. Drying PLA Filament Recommended Drying Temperatures PLA is less hygroscopic than PETG but can still absorb moisture over time. The recommended drying temperature for PLA is between 40¬∞C and 50¬∞C, as PLA has a lower glass transition temperature (around 60¬∞C).\nStandard Drying Temperature: 40¬∞C - 50¬∞C for 4-6 hours. Overdrying PLA While PLA can be overdried if exposed to excessive heat for too long (e.g., above 50¬∞C), this is rare. Overdrying can make PLA brittle, leading to snapping during printing. However, following standard drying guidelines should prevent this issue.\nWhat Happens If PLA Is Wet? When PLA absorbs moisture, it typically shows these symptoms:\nBrittleness: The filament may become brittle and prone to snapping. Poor Surface Finish: The print may have rough or uneven surfaces due to steam escaping. Weak Layer Bonding: Reduced layer adhesion leads to weaker prints. Hygroscopicity of Common Filaments Different filaments vary in their tendency to absorb moisture from the environment. Below is a ranking of common filaments based on their hygroscopicity:\nRank Filament Type Hygroscopicity (Moisture Absorption Tendency) 1 Nylon Extremely Hygroscopic 2 PVA Very Hygroscopic 3 TPU Highly Hygroscopic 4 PETG Moderately Hygroscopic 5 ABS Moderately Hygroscopic 6 PLA Low Hygroscopicity Key Notes: Nylon and other engineering-grade filaments like PVA are extremely hygroscopic and require careful storage in dry conditions or desiccants. While materials like PLA are less prone to absorbing moisture, they still benefit from being kept dry for optimal print quality. Visual Signs of Moisture in Prints When printing with wet filament, you may observe several visual signs indicating that the material has absorbed too much moisture:\nStringing ‚Äì Thin strands of plastic between gaps in the print. Surface Roughness ‚Äì The surface may appear pitted or bumpy due to water vapor escaping during extrusion. Bubbling or Popping Sounds ‚Äì Audible sounds during extrusion as water turns into steam inside the nozzle. Cloudy or Foggy Appearance ‚Äì The print may appear less clear or have a cloudy finish (especially noticeable with transparent filaments like PETG). Conclusion Ensuring that your filament is properly dried before printing is one of the most critical steps in achieving high-quality prints with strong mechanical properties. Moisture-filled filament leads to numerous print defects such as stringing, poor surface finish, weak layer adhesion, and dimensional inaccuracies.\nTo avoid these issues:\nStore your filaments in airtight containers with desiccants when not in use. Follow recommended drying temperatures and times for each type of filament. Be mindful that certain materials like Nylon are highly hygroscopic and require more frequent drying than others like PLA. By keeping your filament dry, you will significantly improve both the visual quality and durability of your printed objects!\nDocumentation: Why Overdrying Filament Is Not GoodIntroduction While drying filament is crucial for achieving high-quality 3D prints, overdrying can also cause issues. Each type of filament has an optimal moisture content, and removing too much moisture or exposing the filament to excessive heat for long periods can degrade its properties. This document explains why overdrying is detrimental, how it affects different filaments, and what signs to look for to avoid it.\nWhy Overdrying Filament Is Harmful Overdrying occurs when filament is exposed to heat for too long or at temperatures higher than recommended. While drying removes unwanted moisture, prolonged exposure to heat can cause the filament to lose its flexibility, become brittle, or degrade its chemical structure. This is particularly true for filaments that contain plasticizers or other additives that help maintain flexibility and strength.\nKey Issues Caused by Overdrying: Brittleness: Overdrying can make filaments like PLA and PETG brittle, causing them to snap easily during printing or even while being fed into the extruder[1][2]. Degradation of Additives: Some filaments contain plasticizers or other additives that improve flexibility and printability. Prolonged exposure to heat can cause these additives to break down, leading to poor print quality[1][2]. Loss of Mechanical Properties: Overdrying can reduce the tensile strength and flexibility of certain filaments, making the printed parts more fragile and prone to breaking under stress[2]. Increased Risk of Clogging: Brittle filament can break inside the extruder or nozzle, causing jams and clogs during printing. Inconsistent Extrusion: Overdrying may also result in inconsistent extrusion rates due to the altered physical properties of the filament. How Overdrying Affects Different Filaments PLA (Polylactic Acid) Optimal Drying Temperature: 40¬∞C - 50¬∞C Effects of Overdrying: PLA is not very hygroscopic but can still absorb some moisture over time. If overdried, PLA becomes brittle and prone to snapping during printing[1]. The plasticizers in PLA may degrade with excessive heat exposure, further reducing its flexibility. PETG (Polyethylene Terephthalate Glycol) Optimal Drying Temperature: 55¬∞C - 70¬∞C Effects of Overdrying: PETG is moderately hygroscopic and benefits from drying before use. However, overdrying PETG at temperatures above 70¬∞C or for too long can make it brittle and reduce its impact resistance[2]. Nylon (Polyamide) Optimal Drying Temperature: 70¬∞C - 90¬∞C Effects of Overdrying: Nylon is extremely hygroscopic and requires careful drying. However, prolonged exposure to high temperatures can cause degradation of its polymer chains, leading to reduced strength and flexibility[2]. TPU (Thermoplastic Polyurethane) Optimal Drying Temperature: 50¬∞C - 60¬∞C Effects of Overdrying: TPU is highly flexible but can lose this property if overdried. Excessive drying makes TPU stiff and less elastic, which negatively impacts its ability to produce flexible parts[4]. Signs That Filament Has Been Overdried If your filament has been overdried, you may notice several signs during printing or handling:\nBrittle Filament: The filament snaps easily when unspooled or fed into the printer. Poor Print Quality: The printed parts may have rough surfaces or weak layer adhesion due to the degraded properties of the filament. Frequent Clogs: Brittle filament is more likely to break inside the extruder or nozzle, causing jams. Inconsistent Extrusion: You may observe uneven extrusion during printing as the filament‚Äôs flow characteristics change. How to Avoid Overdrying To avoid overdrying your filament, follow these best practices:\nUse Recommended Drying Temperatures: Always refer to the manufacturer‚Äôs guidelines for drying times and temperatures specific to each type of filament. Monitor Drying Time: Avoid leaving your filament in a dryer or oven for longer than necessary. Most filaments only need about 4-6 hours of drying under proper conditions. Use a Filament Dryer with Temperature Control: Dedicated filament dryers often have precise temperature control settings that prevent overheating[3]. Store Filament Properly After Drying: Once dried, store your filament in airtight containers with desiccants to prevent reabsorption of moisture. Conclusion While drying your filament is essential for achieving high-quality prints, overdrying can lead to brittleness, loss of flexibility, and degradation of mechanical properties. Each type of filament has an optimal moisture content that should be maintained for best results. By following recommended drying guidelines and avoiding excessive heat exposure, you can ensure that your filament remains in optimal condition without risking over-drying.\nProperly dried‚Äîbut not overdried‚Äîfilament will give you smoother prints with better layer adhesion and mechanical strength.\nCitations: [1] https://www.reddit.com/r/3Dprinting/comments/yk4ff0/can_you_dry_pla_too_much_is_there_a_downside_to/ [2] https://www.massportal.com/3d-printers/filament-dryers/drying-overview/ [3] https://formfutura.com/blog/3d-printing-guide-how-to-dry-filament/ [4] https://www.wevolver.com/article/how-to-dry-filament [5] https://3dgence.com/3dnews/is-filament-heating-before-use-necessary\nSpecificationsDetailed technical specifications of the Lister 3D printer. Getting StartedNew to Lister? Start here with our comprehensive setup guide. TroubleshootingCommon issues and their solutions. ","documentation-why-overdrying-filament-is-not-good#Documentation: Why Overdrying Filament Is Not Good":"","drying-3d-printer-filaments-a-comprehensive-guide#Drying 3D Printer Filaments: A Comprehensive Guide":"","drying-petg-filament#\u003cstrong\u003eDrying PETG Filament\u003c/strong\u003e":"","drying-pla-filament#\u003cstrong\u003eDrying PLA Filament\u003c/strong\u003e":"","how-overdrying-affects-different-filaments#\u003cstrong\u003eHow Overdrying Affects Different Filaments\u003c/strong\u003e":"","how-to-avoid-overdrying#\u003cstrong\u003eHow to Avoid Overdrying\u003c/strong\u003e":"","hygroscopicity-of-common-filaments#\u003cstrong\u003eHygroscopicity of Common Filaments\u003c/strong\u003e":"","introduction#\u003cstrong\u003eIntroduction\u003c/strong\u003e":"","introduction-1#\u003cstrong\u003eIntroduction\u003c/strong\u003e":"","signs-that-filament-has-been-overdried#\u003cstrong\u003eSigns That Filament Has Been Overdried\u003c/strong\u003e":"","visual-signs-of-moisture-in-prints#\u003cstrong\u003eVisual Signs of Moisture in Prints\u003c/strong\u003e":"","why-dry-filament-is-crucial#\u003cstrong\u003eWhy Dry Filament Is Crucial\u003c/strong\u003e":"","why-overdrying-filament-is-harmful#\u003cstrong\u003eWhy Overdrying Filament Is Harmful\u003c/strong\u003e":""},"title":"Hygroscopic Materials Guide"},"/documents/introduction/":{"data":{"-navigation#üîç Navigation":" Getting StartedBegin your journey with the Lister 3D printer Technical SpecificationsDetailed specifications and capabilities Key DifferencesWhat makes the Lister unique ","community-and-support#Community and Support":"While primarily designed for the South African market, the Lister‚Äôs open-source nature invites a global community of enthusiasts and innovators. Users are encouraged to explore, modify, and contribute to the Lister ecosystem, fostering a collaborative environment for continuous improvement.","conclusion#Conclusion":"The CWE3D Lister 3D printer represents a thoughtful approach to 3D printing, where reliability, precision, and user empowerment take center stage. It‚Äôs not just a tool; it‚Äôs a platform for creativity, learning, and innovation. By choosing a Lister, users aren‚Äôt just getting a 3D printer‚Äîthey‚Äôre joining a philosophy of sustainable, user-centric design in the world of additive manufacturing.\nWhether you‚Äôre an educator shaping the minds of future engineers, a small business owner bringing ideas to life, or an enthusiast pushing the boundaries of what‚Äôs possible with 3D printing, the Lister is designed to be your reliable partner in creation.","cwe3d-lister-3d-printer-#CWE3D Lister 3D Printer üöÄ":"CWE3D Lister 3D Printer üöÄ ‚ÑπÔ∏è Welcome to the Lister 3D printer documentation. This guide will introduce you to our thoughtfully engineered solution for reliable, precise, and maintainable 3D printing. ","design-philosophy#Design Philosophy":" ReliabilityEvery component and system is chosen and designed with longevity and consistent performance in mind PrecisionFrom the dual ballscrew Z-axis to the CoreXY kinematics, precision is paramount in the Lister‚Äôs design MaintainabilityEase of maintenance isn‚Äôt an afterthought‚Äîit‚Äôs a core design principle, influenced by lessons from automotive engineering OpennessLister embraces open-source principles, allowing users to understand, modify, and improve their machines Balanced PerformanceThe Lister strikes a careful balance between speed, quality, and reliability, optimized for consistent, successful prints QualityEngineered to last, with heavy duty components and a focus on durability a machine built to last ","ideal-use-cases#Ideal Use Cases":"The Lister 3D printer excels in environments where reliability and print quality are paramount:\nEducational institutions requiring consistent performance for student projects Small businesses needing dependable prototyping capabilities Hobbyists and makers who value a machine they can understand, maintain, and modify ","key-features-and-their-purpose#Key Features and Their Purpose":"üèóÔ∏è Thoughtful Frame Design The Lister utilizes a rigid aluminum profile PG2020/40 construction, creating a foundation that supports future upgrades and modifications. Key Benefits:\n‚úÖ Enhanced stability ‚úÖ Easy access for maintenance ‚úÖ Straightforward part replacement ‚úÖ Future-proof design üîÑ CoreXY Kinematics While CoreXY is known for its speed capabilities, in the Lister, it‚Äôs implemented with a focus on precision and reliability:\nüéØ GT2 6mm belt drive system üîß Meticulously aligned components ‚öôÔ∏è Precise tensioning system üéÆ Accurate, repeatable movements üîù Innovative Z-Axis Solution The dual ballscrew system (SFU 1204) for the Z-axis is a standout feature:\nStabilityPrecisionDurability Superior stability compared to traditional lead screws Enhanced load handling capacity Reduced vibration during operation Minimal backlash Precise layer heights Consistent Z movements Reduced wear over time Long-term reliability Low maintenance requirements üéØ Accurate Sensorless Homing By leveraging the capabilities of TMC2209 stepper drivers, the Lister implements sensorless homing on all axes:\n‚ö†Ô∏è This innovative approach reduces complexity while maintaining high precision, eliminating the need for physical endstops. Benefits:\nüìâ Fewer components that can fail üîå Simplified wiring üéØ High-precision homing operations üõ†Ô∏è Reduced maintenance needs üõèÔ∏è Custom Bed Design for Optimal Printing The bed system features:\nüå°Ô∏è Even heat distribution with silicone heater pad üìè 3mm Garolite F4 GF material for superior flatness üîÑ Quick-release magnetic PEI surface üõ°Ô∏è Efficient thermal isolation üéØ Precise leveling system üå°Ô∏è Great thermal stability, low thermal expansion ‚ö° Electrical System The modular electrical system with a terminal block patch panel is inspired by industrial design principles. This approach:\nAllows for easy component replacement without soldering Simplifies troubleshooting and upgrades Enhances the overall longevity of the machine üíª Software Experience Running on Klipper firmware with a custom RatOS configuration, the Lister offers:\nAdvanced features like pressure advance and input shaping Custom macros for Lister-specific operations Adaptive bed meshing for optimal first layer adhesion Sophisticated filament runout handling with purge operations ","limitations-and-considerations#Limitations and Considerations":"It‚Äôs important to note that the Lister is optimized for a specific range of materials and use cases:\nNot designed for high-temperature materials requiring an enclosure Maximum bed temperature of 90¬∞C to preserve magnetic properties Focused on common filaments and engineering grades that don‚Äôt require special environmental controls ","overview#Overview":"CWE3D Lister 3D Printer: Engineering Reliability and Precision\nThe CWE3D Lister is not just another 3D printer; it‚Äôs a carefully engineered solution designed to meet the specific needs of serious hobbyists, businesses, and educational institutions. Born from the desire to create a reliable, precise, and easily maintainable 3D printing platform, the Lister draws inspiration from renowned open-source projects while carving its own path in the world of additive manufacturing.","the-lister-experience#The Lister Experience":"Using a Lister 3D printer is designed to be a seamless and enjoyable experience:\nInitial Setup: The printer arrives pre-built and expertly tuned, ready for action right out of the box. User Interface: Whether through the web interface or via direct connection, controlling the Lister is intuitive and powerful. Maintenance: Regular maintenance tasks are simplified through helpful macros and the printer‚Äôs accessible design. Upgradability: As technology advances, the Lister is designed to evolve, with a frame and system capable of accommodating future enhancements. "},"title":"Introduction"},"/documents/key_differences/":{"data":{"1-build-quality-and-design-philosophy#1. Build Quality and Design Philosophy":"The Lister emphasizes high build quality and reliability, similar to high-end printers like those from Bamboo Labs. However, it distinguishes itself with a focus on maintainability and simplicity. Unlike fully enclosed printers like some Voron or RatRig models, the Lister features an open frame design, prioritizing accessibility and ease of maintenance over the ability to print high-temperature materials.","2-z-axis-system#2. Z-Axis System":"One of the Lister‚Äôs standout features is its dual ballscrew Z-axis system. This is a significant departure from the lead screw systems commonly found in printers like the Ender series or the belt-driven Z-axis in some Voron designs. The dual ballscrew system offers superior stability, precision, and reduced backlash compared to traditional Z-axis implementations.","3-bed-design-and-material#3. Bed Design and Material":"The Lister uses a unique bed design featuring a Garolite F4 base. This material choice differs from the more common aluminum beds with PEI sheets (like those found in Prusa printers) or the spring steel PEI sheets used in Bamboo Labs printers. The Garolite F4 offers excellent flatness and thermal stability, potentially providing more consistent first layers across the entire build surface.","4-sensorless-homing#4. Sensorless Homing":"While sensorless homing is available as an option on some high-end DIY printers, the Lister implements it on all axes as a standard feature. This reduces the number of components that can fail and contributes to the printer‚Äôs clean aesthetics. In contrast, most consumer printers like Enders or even some higher-end models still rely on physical endstops.","5-market-focus-and-availability#5. Market Focus and Availability":"Unlike globally marketed printers from brands like Creality, Prusa, or Bamboo Labs, the Lister is specifically designed for the South African market. This focused approach allows for optimizations based on local needs and availability of parts, which is particularly relevant for maintenance and upgrades.","6-upgradability-and-open-ecosystem#6. Upgradability and Open Ecosystem":"While many printers offer some level of upgradability, the Lister is designed with a strong focus on future enhancements. Its frame and core systems are built to accommodate technological advancements, with upgrade paths being a key consideration in the design. This open and forward-thinking approach is more pronounced than in many consumer-grade printers.","7-software-and-control-system#7. Software and Control System":"The Lister runs on Klipper firmware with a custom RatOS configuration, which is more advanced than the typical Marlin firmware found in many consumer printers. This setup, combined with custom macros and plugins, offers a more flexible and powerful control system, closer to what you might find in high-end DIY builds.","8-extruder-system#8. Extruder System":"The Lister uses a Bigtreetech H2 V2S Direct Drive Extruder, which offers a balance between the simplicity of common direct drive systems and the performance of more advanced extruders. This choice allows for reliable printing of a wide range of materials without the complexity of some high-end extruder designs.","9-electrical-system-design#9. Electrical System Design":"The Lister‚Äôs electrical system, with its terminal block patch panel and organized wiring, is more akin to industrial designs than typical consumer 3D printers. This approach greatly simplifies maintenance and troubleshooting compared to the often cluttered and hard-to-service wiring in many off-the-shelf printers.","conclusion#Conclusion":"The CWE3D Lister carves out a unique position in the 3D printer market. It combines the reliability and build quality of high-end consumer printers with the openness and upgradability of DIY models, all while maintaining a focus on simplicity and maintainability. Its specific optimizations for the South African market further distinguish it from globally marketed printers, making it an interesting option for users looking for a balance between performance, reliability, and long-term value.\nIntroductionLearn about the Lister 3D printer‚Äôs design philosophy and features. SpecificationsDetailed technical specifications of the Lister 3D printer. Getting StartedNew to Lister? Start here with our comprehensive setup guide. ","lister-vs-other-3d-printers-key-differences#Lister vs Other 3D Printers: Key Differences":"Lister vs Other 3D Printers: Key DifferencesThe CWE3D Lister 3D printer stands out in the 3D printing market with several unique features and design choices. Here‚Äôs a comprehensive summary of how it differs from other popular 3D printers:"},"title":"Key Differences"},"/documents/klipper/":{"data":{"best-practices#Best Practices":" Error Handling: def validate_conditions(self): if not self.is_ready: raise self.printer.command_error(\"Printer not ready\") Event Handling: def register_events(self): self.printer.register_event_handler(\"klippy:connect\", self.handle_connect) self.printer.register_event_handler(\"klippy:ready\", self.handle_ready) Command Registration: def register_commands(self): self.gcode = self.printer.lookup_object('gcode') self.gcode.register_command( 'MY_COMMAND', self.cmd_my_command, desc=\"Command description\" ) Status Updates: def get_status(self, eventtime): return { 'status': self.current_status, 'value': self.sensor_value } This documentation provides a foundation for understanding Klipper‚Äôs architecture and developing plugins. For more specific use cases or detailed information about particular components, refer to the Klipper source code or existing plugins.\nMoonraker ConfigurationConfigure Moonraker for your Klipper setup. Getting StartedNew to Lister? Start here with our comprehensive setup guide. TroubleshootingCommon issues and their solutions. ","common-use-cases#Common Use Cases":"1. Moving the Printer def move_example(self): toolhead = self.printer.lookup_object('toolhead') # Get current position current_pos = toolhead.get_position() # Move to new position [X, Y, Z, E] new_pos = [100, 100, 20, 0] toolhead.move(new_pos, speed=50) 2. Reading Sensors def read_sensor(self): # Access MCU ADC mcu = self.printer.lookup_object('mcu') pin = mcu.setup_pin('analog_in', 'PA0') value = pin.get_adc_value() 3. Creating Status Updates def get_status(self, eventtime): return { 'temperature': self.current_temp, 'target': self.target_temp, 'power': self.heater_power } 4. Configuration File Example [my_plugin] # Required configuration speed: 100.0 distance: 10 # Optional configuration pin: PA0 max_temp: 100 ","core-components#Core Components":"1. Printer Object The central object that manages the entire system. All major components are registered with and accessible through the printer object.\nclass Printer: def __init__(self): self.objects = {} # All registered components self.event_handlers = {} # Event system 2. GCode Handler Processes G-code commands and manages command queue:\nclass GCodeDispatch: def __init__(self, printer): self.printer = printer self.gcode_handlers = {} # Command handlers self.mux_commands = {} # Multiplexed commands 3. Toolhead Manages motion control and coordinates movement:\nclass ToolHead: def __init__(self, config): self.printer = config.get_printer() self.max_velocity = config.getfloat('max_velocity', above=0.) self.max_accel = config.getfloat('max_accel', above=0.) ","event-system#Event System":"Klipper uses an event system for component communication. Events are registered and handled through the printer object.\nCommon Events klippy:connect - System startup klippy:ready - System is ready for operation klippy:shutdown - System shutdown gcode:command_error - G-code command error Example Usage def __init__(self, config): self.printer = config.get_printer() self.printer.register_event_handler(\"klippy:connect\", self.handle_connect) def handle_connect(self): # Called when system connects pass ","g-code-processing#G-Code Processing":"G-code commands go through several stages:\nParsing - Command is parsed into components Validation - Parameters are validated Execution - Command is executed Response - Results are returned Command Registration def __init__(self, config): self.gcode = config.get_printer().lookup_object('gcode') self.gcode.register_command('MY_COMMAND', self.cmd_MY_COMMAND) def cmd_MY_COMMAND(self, gcmd): # Handle command value = gcmd.get_float('PARAM', default=0.) ","klipper-system-documentation#Klipper System Documentation":"Klipper System Documentation","plugin-development-guide#Plugin Development Guide":"Basic Plugin Structure class MyPlugin: def __init__(self, config): self.printer = config.get_printer() # Register event handlers self.printer.register_event_handler(\"klippy:connect\", self.handle_connect) # Register G-code commands gcode = self.printer.lookup_object('gcode') gcode.register_command(\"MY_COMMAND\", self.cmd_MY_COMMAND) def handle_connect(self): # Initialization after connection pass def cmd_MY_COMMAND(self, gcmd): # Handle G-code command pass def load_config(config): return MyPlugin(config) Accessing Printer Data Configuration Values: class MyPlugin: def __init__(self, config): # Get config values self.speed = config.getfloat('speed', default=100.0) self.distance = config.getint('distance', default=10) Printer Components: def get_printer_objects(self): # Access toolhead toolhead = self.printer.lookup_object('toolhead') current_pos = toolhead.get_position() # Access gcode interface gcode = self.printer.lookup_object('gcode') # Access kinematics kin = toolhead.get_kinematics() Status Information: def get_status(self, eventtime): return { 'speed': self.speed, 'position': self.toolhead.get_position(), 'status': self.current_status } ","system-overview#System Overview":"Klipper is a 3D printer firmware that uses a host computer to do detailed motion planning and sends low-level commands to microcontroller boards. Here‚Äôs how it works at a high level:\nThe host computer runs the main Klipper software (in Python) It processes G-code commands and performs motion planning Sends precise timing commands to microcontrollers Microcontrollers execute these commands with exact timing Key Features Precise timing control Complex motion planning on host computer Event-driven architecture Plugin system for extensibility Multi-MCU support ","table-of-contents#Table of Contents":" System Overview Core Components Event System G-Code Processing Plugin Development Guide Common Use Cases "},"title":"Klipper Setup"},"/documents/markdown/":{"data":{"blockquotes#Blockquotes":" This is a blockquote. It can span multiple lines.","code#Code":"Inline code: code\nCode block:\ndef hello_world(): print(\"Hello, World!\") ","emphasis#Emphasis":"Italic Bold Bold and Italic Strikethrough","escaping-characters#Escaping Characters":"*This text is surrounded by asterisks but not italic*","footnotes#Footnotes":"Here‚Äôs a sentence with a footnote. 1\nThis is the footnote.¬†‚Ü©Ô∏é","h1#H1":"Markdown CheatsheetHeaders H1","h2#H2":"H3 H4 H5 H6 ","headers#Headers":"","horizontal-rule#Horizontal Rule":" ","images#Images":"","links#Links":"Link text","lists#Lists":"Unordered Item 1 Item 2 Subitem 2.1 Subitem 2.2 Ordered First item Second item Third item ","markdown-cheatsheet#Markdown Cheatsheet":"","tables#Tables":" Header 1 Header 2 Cell 1 Cell 2 Cell 3 Cell 4 ","task-lists#Task Lists":" Completed task Uncompleted task "},"title":"markdown"},"/documents/moonraker/":{"data":{"best-practices#Best Practices":"","best-practices-1#Best Practices":" Error Handling try: # Component operation except Exception as e: self.server.add_warning( f\"Error in component: {str(e)}\", warn_id=\"unique_id\" ) Cleanup async def close(): # Cleanup resources pass Configuration Validation Always validate required options Provide sensible defaults Document configuration in comments Type Safety Use type hints Validate input types Handle type conversion errors ","component-communication#Component Communication":"","component-communication-1#Component Communication":"Components can interact through:\nDirect Lookup component = self.server.lookup_component(\"component_name\") Event System await self.server.send_event(\"event_name\", *args) Remote Methods Called through klippy_connection Allows bidirectional communication ","component-lifecycle#Component Lifecycle":"","component-lifecycle-1#Component Lifecycle":"1. Loading def load_component(config: ConfigHelper): return ComponentClass(config) 2. Initialization Flow Basic constructor initialization Server components loaded first Core components loaded in order Optional components loaded async component_init() called if exists Configuration validated 3. Error Handling Components can raise ConfigError during load Failed components tracked in server.failed_components Optional components can fail without crashing server ","component-registration#Component Registration":"","component-registration-1#Component Registration":"Components can register:\n1. Endpoints self.server.register_endpoint( \"/component/path\", RequestType.GET | RequestType.POST, callback_method ) 2. Remote Methods self.server.register_remote_method( \"method_name\", callback_method ) 3. Event Handlers self.server.register_event_handler( \"event_name\", callback_method ) 4. Notifications self.server.register_notification( \"notification_name\" ) ","component-template#Component Template":"","component-template-1#Component Template":"Basic component structure:\nfrom __future__ import annotations from typing import TYPE_CHECKING, Dict, Any if TYPE_CHECKING: from confighelper import ConfigHelper class NewComponent: def __init__(self, config: ConfigHelper) -\u003e None: self.server = config.get_server() # Initialize from config async def component_init(self) -\u003e None: # Async initialization pass async def close(self) -\u003e None: # Cleanup pass def load_component(config: ConfigHelper) -\u003e NewComponent: return NewComponent(config) ","configuration-helper#Configuration Helper":"","configuration-helper-1#Configuration Helper":"The ConfigHelper class provides robust configuration management:\nKey Methods get(option, default) - Get string value getint(option, default) - Get integer value getboolean(option, default) - Get boolean value getfloat(option, default) - Get float value getlist(option, default) - Get list value getdict(option, default) - Get dictionary value getsection(section) - Get new ConfigHelper for section Special Features Type validation and conversion Range checking (min/max values) Required vs optional parameters Fallback values Deprecation tracking ","core-concepts#Core Concepts":"","core-concepts-1#Core Concepts":"Component Definition A Moonraker component is a modular piece of functionality that can be loaded and initialized by the server. Components are Python modules located in the moonraker/components directory.\nKey Requirements Each component module must define a load_component(config: ConfigHelper) function The load_component function returns an instance of the component class Components may have an optional async component_init() method for post-initialization tasks Component Types Server Components\nUse the [server] section for configuration Examples: application, websockets, klippy_connection Core Components\nRequired for basic functionality Loaded in specific order Examples: database, file_manager, klippy_apis, machine Optional Components\nLoaded if configured in moonraker.conf Can fail without affecting core functionality ","example-component#Example Component":"Moonraker Component System GuideCore Concepts Component Definition A Moonraker component is a modular piece of functionality that can be loaded and initialized by the server. Components are Python modules located in the moonraker/components directory.\nKey Requirements Each component module must define a load_component(config: ConfigHelper) function The load_component function returns an instance of the component class Components may have an optional async component_init() method for post-initialization tasks Component Types Server Components\nUse the [server] section for configuration Examples: application, websockets, klippy_connection Core Components\nRequired for basic functionality Loaded in specific order Examples: database, file_manager, klippy_apis, machine Optional Components\nLoaded if configured in moonraker.conf Can fail without affecting core functionality Component Lifecycle 1. Loading def load_component(config: ConfigHelper): return ComponentClass(config) 2. Initialization Flow Basic constructor initialization Server components loaded first Core components loaded in order Optional components loaded async component_init() called if exists Configuration validated 3. Error Handling Components can raise ConfigError during load Failed components tracked in server.failed_components Optional components can fail without crashing server Configuration Helper The ConfigHelper class provides robust configuration management:\nKey Methods get(option, default) - Get string value getint(option, default) - Get integer value getboolean(option, default) - Get boolean value getfloat(option, default) - Get float value getlist(option, default) - Get list value getdict(option, default) - Get dictionary value getsection(section) - Get new ConfigHelper for section Special Features Type validation and conversion Range checking (min/max values) Required vs optional parameters Fallback values Deprecation tracking Component Registration Components can register:\n1. Endpoints self.server.register_endpoint( \"/component/path\", RequestType.GET | RequestType.POST, callback_method ) 2. Remote Methods self.server.register_remote_method( \"method_name\", callback_method ) 3. Event Handlers self.server.register_event_handler( \"event_name\", callback_method ) 4. Notifications self.server.register_notification( \"notification_name\" ) Component Communication Components can interact through:\nDirect Lookup component = self.server.lookup_component(\"component_name\") Event System await self.server.send_event(\"event_name\", *args) Remote Methods Called through klippy_connection Allows bidirectional communication Best Practices Error Handling try: # Component operation except Exception as e: self.server.add_warning( f\"Error in component: {str(e)}\", warn_id=\"unique_id\" ) Cleanup async def close(): # Cleanup resources pass Configuration Validation Always validate required options Provide sensible defaults Document configuration in comments Type Safety Use type hints Validate input types Handle type conversion errors Component Template Basic component structure:\nfrom __future__ import annotations from typing import TYPE_CHECKING, Dict, Any if TYPE_CHECKING: from confighelper import ConfigHelper class NewComponent: def __init__(self, config: ConfigHelper) -\u003e None: self.server = config.get_server() # Initialize from config async def component_init(self) -\u003e None: # Async initialization pass async def close(self) -\u003e None: # Cleanup pass def load_component(config: ConfigHelper) -\u003e NewComponent: return NewComponent(config) Important Notes Components should be independent and loosely coupled\nCore components are initialized synchronously in order\nOptional components can be initialized asynchronously\nAlways provide proper error handling and cleanup\nUse type hints and documentation\nFollow the established naming conventions\nRegister endpoints/methods before server starts\nClean up resources in close() method\nValidate configuration thoroughly\nUse server.error for error handling\nThis guide provides the core understanding needed to create and maintain Moonraker components. Reference the specific component implementations for more detailed examples.\nExample Component","important-notes#Important Notes":"","important-notes-1#Important Notes":" Components should be independent and loosely coupled\nCore components are initialized synchronously in order\nOptional components can be initialized asynchronously\nAlways provide proper error handling and cleanup\nUse type hints and documentation\nFollow the established naming conventions\nRegister endpoints/methods before server starts\nClean up resources in close() method\nValidate configuration thoroughly\nUse server.error for error handling\nThis guide provides the core understanding needed to create and maintain Moonraker components. Reference the specific component implementations for more detailed examples.\nfrom __future__ import annotations import logging import asyncio from typing import TYPE_CHECKING, Dict, Any, Optional, List, Union if TYPE_CHECKING: from ..confighelper import ConfigHelper from ..common import WebRequest from .klippy_apis import KlippyAPI from .database import MoonrakerDatabase from .file_manager import FileManager from .machine import Machine from .job_state import JobState from .template import TemplateFactory from .http_client import HttpClient from .websockets import WebsocketManager from .announcements import Announcements class ExampleComponent: def __init__(self, config: ConfigHelper) -\u003e None: # Server instance - provides access to core server functionality self.server = config.get_server() # Event loop - for scheduling async tasks self.event_loop = self.server.get_event_loop() # Component name from config section self.name = config.get_name() # Get config options with type conversion and validation self.update_interval = config.getfloat('update_interval', 1.0, above=0.) self.enabled = config.getboolean('enabled', True) self.retries = config.getint('retries', 3, minval=1) self.directories = config.getlist('watched_dirs', separator=',') # Template support self.cmd_template = config.gettemplate('command_template', None) # Register endpoints (HTTP/Websocket) self.server.register_endpoint( \"/example/status\", ['GET'], self._handle_status_request ) self.server.register_endpoint( \"/example/command\", ['POST'], self._handle_command_request ) # Register remote methods (called from Klipper) self.server.register_remote_method( \"example_notification\", self._handle_klippy_notification ) # Register notification self.server.register_notification(\"example:status_update\") # Register event handlers self.server.register_event_handler( \"server:klippy_ready\", self._handle_ready ) self.server.register_event_handler( \"server:klippy_shutdown\", self._handle_shutdown ) # Initialize state self.is_ready: bool = False self.last_status: Dict[str, Any] = {} self._update_timer = self.event_loop.register_timer( self._handle_timer_update ) def get_status(self) -\u003e Dict[str, Any]: \"\"\"Return component status\"\"\" return { 'enabled': self.enabled, 'is_ready': self.is_ready, 'last_status': self.last_status } async def _handle_status_request(self, web_request: WebRequest) -\u003e Dict[str, Any]: \"\"\"Handle status request endpoint\"\"\" return { 'status': self.get_status(), # Access to other component status 'klippy_status': self._get_klippy_status(), 'job_status': self._get_job_status() } async def _handle_command_request(self, web_request: WebRequest) -\u003e Dict[str, Any]: \"\"\"Handle command request endpoint\"\"\" command = web_request.get_str('command') value = web_request.get_float('value', 0.) # Example of sending gcode if command == \"move\": await self._send_gcode(f\"G1 X{value} F3000\") # Example of getting printer objects elif command == \"info\": return await self._query_printer_objects() return {'ok': True} def _handle_klippy_notification(self, **kwargs) -\u003e None: \"\"\"Handle notification from Klipper\"\"\" self.last_status.update(kwargs) # Emit notification to clients self.server.send_event(\"example:status_update\", kwargs) async def _handle_ready(self) -\u003e None: \"\"\"Handle Klippy ready event\"\"\" self.is_ready = True # Start update timer self._update_timer.start() async def _handle_shutdown(self) -\u003e None: \"\"\"Handle Klippy shutdown event\"\"\" self.is_ready = False self._update_timer.stop() async def _handle_timer_update(self, eventtime: float) -\u003e float: \"\"\"Periodic timer callback\"\"\" # Example of database usage db: MoonrakerDatabase = self.server.lookup_component('database') stored_data = db.get_item(\"example\", \"stored_value\", None) # Example of template rendering if self.cmd_template is not None: rendered = await self.cmd_template.render_async({ 'eventtime': eventtime, 'stored_data': stored_data }) logging.info(f\"Rendered template: {rendered}\") # Return next interval return eventtime + self.update_interval def _get_klippy_status(self) -\u003e Dict[str, Any]: \"\"\"Example of accessing Klippy APIs\"\"\" kapis: KlippyAPI = self.server.lookup_component('klippy_apis') return { 'klippy_connected': kapis.is_connected(), 'klippy_state': str(kapis.get_klippy_state()), } def _get_job_status(self) -\u003e Dict[str, Any]: \"\"\"Example of accessing Job State\"\"\" job_state: JobState = self.server.lookup_component('job_state') return job_state.get_last_stats() async def _send_gcode(self, gcode: str) -\u003e str: \"\"\"Example of sending gcode command\"\"\" kapis: KlippyAPI = self.server.lookup_component('klippy_apis') return await kapis.run_gcode(gcode) async def _query_printer_objects(self) -\u003e Dict[str, Any]: \"\"\"Example of querying printer objects\"\"\" kapis: KlippyAPI = self.server.lookup_component('klippy_apis') query = {'toolhead': None, 'extruder': ['temperature']} return await kapis.query_objects(query) async def component_init(self) -\u003e None: \"\"\"Async initialization\"\"\" # Example of HTTP client usage client: HttpClient = self.server.lookup_component('http_client') try: resp = await client.get( \"https://api.example.com/status\", attempts=self.retries ) resp.raise_for_status() self.last_status = resp.json() except Exception: logging.exception(\"Error fetching remote status\") # Example of websocket notification wsm: WebsocketManager = self.server.lookup_component('websockets') wsm.notify_clients({'example_init': True}) # Example of file manager usage file_manager: FileManager = self.server.lookup_component('file_manager') for directory in self.directories: if not file_manager.check_directory_exists(directory): logging.info(f\"Creating directory: {directory}\") await file_manager.mkdir(directory) async def close(self) -\u003e None: \"\"\"Component shutdown\"\"\" self._update_timer.stop() # Example of database update db: MoonrakerDatabase = self.server.lookup_component('database') db.insert_item(\"example\", \"last_shutdown\", self.last_status) def load_component(config: ConfigHelper) -\u003e ExampleComponent: \"\"\"Load component\"\"\" return ExampleComponent(config) Klipper SetupSet up and configure Klipper firmware. Getting StartedNew to Lister? Start here with our comprehensive setup guide. TroubleshootingCommon issues and their solutions. ","moonraker-component-system-guide#Moonraker Component System Guide":"","moonraker-component-system-guide-1#Moonraker Component System Guide":""},"title":"Moonraker Configuration"},"/documents/parts_layout/":{"data":{"1-back-panel-system-printableback#1. Back Panel System (printable/back)":" led_panel_label 24v_panel_label 5v_dc_reducer_clip electric_panel_casing/ lid/ a_lid b_lid c_lid d_lid e_lid f_lid g_lid trunking/ a_trunking b_trunking c_trunking d_trunking e_trunking f_trunking g_trunking main_controller_lid main_controller_base ","2-z-bed-system-printablez_bed#2. Z-Bed System (printable/z_bed)":" stepper_assembly/ z_thrust_bearing_spacer_r z_thrust_bearing_spacer_l thrust_bearing_casing_r thrust_bearing_casing_l 8mm_stepper_spacer_bottom_r 8mm_stepper_spacer_bottom_l stepper_mount_r stepper_mount_l heating_bed/ center_adjust_knob bed_center_adjust_disc bed_frame_legs/ bed_wheel_turn_handle_1 bed_wheel_turn_handle_2 bed_wheel_turn_handle_3 bed_wheel_turn_handle_4 heater_bed_cable_guide frame_brackets/ bed_frame_front_right_bracket bed_frame_front_left_bracket bed_frame_rear_right_bracket bed_frame_rear_left_bracket ","3-z-bed-brackets-printablez_bedbrackets#3. Z-Bed Brackets (printable/z_bed/brackets)":" bed_alignment_bracket top_support_bracket_1 top_support_bracket_2 12mm_z_rod_bottom_bracket_1 12mm_z_rod_bottom_bracket_2 12mm_z_rod_bottom_bracket_3 12mm_z_rod_bottom_bracket_4 12mm_z_rod_top_bracket_1 12mm_z_rod_top_bracket_2 12mm_z_rod_top_bracket_3 12mm_z_rod_top_bracket_4 z_bottom_shield_bracket_1 z_bottom_shield_bracket_2 z_top_shield_bracket_1 z_top_shield_bracket_2 12mm_bearing_bracket_1 12mm_bearing_bracket_2 12mm_bearing_bracket_3 12mm_bearing_bracket_4 ","4-gantry-system-printabletopgantry#4. Gantry System (printable/top/gantry)":" belt_clips/ 6mm_gt2_belt_clip_1 6mm_gt2_belt_clip_2 6mm_gt2_belt_clip_3 6mm_gt2_belt_clip_4 pulley_caps/ pulley_caps_1 pulley_caps_2 pulley_caps_3 pulley_caps_4 pulley_caps_5 pulley_caps_6 y_block_pully_caps_r y_block_pully_caps_l shoulder_caps/ 8mm_rod_end_caps_1 8mm_rod_end_caps_2 8mm_rod_end_caps_3 8mm_rod_end_caps_4 tensioners/ tensioner_pully_rr tensioner_pully_fr tensioner_pully_rl tensioner_pully_fl probe_bracket gantry_harness_guide_back ","5-extruder-assembly-printabletopgantryextruder_assembly#5. Extruder Assembly (printable/top/gantry/extruder_assembly)":" terminal_block_cover terminal_box part_cooling_blower_duct terminal_base_bracket h2_extruder_bracket 5015_blower_fan_bracket 8mm_x_rod_bearing_block y_bearing_block_l y_bearing_block_r ","6-y-rod-system-printabletopgantry12mm_y_rod_bracket#6. Y-Rod System (printable/top/gantry/12mm_y_rod_bracket)":" y_rod_bracket_r/ cover_1 cover_2 bracket_1 bracket_2 y_rod_bracket_l/ cover_3 cover_4 bracket_3 bracket_4 ","7-frame-structure-printable#7. Frame Structure (printable)":" bottom/frame_brackets/ inner_corner_support_1 inner_corner_support_2 inner_corner_support_3 inner_corner_support_4 bottom_frame_bracket_r1 bottom_frame_bracket_r2 bottom_frame_bracket_l1 bottom_frame_bracket_l2 top/frame_brackets/ top_front_left_bracket top_front_right_bracket top_nema17_left_bracket top_nema17_right_bracket bottom/anti_vibration_feet/ anti_vibration_foot (x4) ","8-support-and-alignment-printable#8. Support and Alignment (printable)":" inner_support_align_brackets/ inner_support_align_bracket_l_1 inner_support_align_bracket_l_2 inner_support_align_bracket_l_3 inner_support_align_bracket_l_4 inner_support_align_bracket_r_1 inner_support_align_bracket_r_2 inner_support_align_bracket_r_3 inner_support_align_bracket_r_4 ","9-branding-and-sensors-printabletop#9. Branding and Sensors (printable/top)":" printer_name_tag cwe3d_name_tag/ cwe3d_name_tag_r cwe3d_name_tag_l led_base_bracket_r led_base_bracket_l runout_sensor_bracket ","complete-directory-tree#Complete Directory Tree":"printable/ ‚îú‚îÄ‚îÄ back/ ‚îÇ ‚îú‚îÄ‚îÄ led_panel_label ‚îÇ ‚îú‚îÄ‚îÄ 24v_panel_label ‚îÇ ‚îú‚îÄ‚îÄ 5v_dc_reducer_clip ‚îÇ ‚îî‚îÄ‚îÄ electric_panel_casing/ ‚îÇ ‚îú‚îÄ‚îÄ lid/ ‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ a_lid ‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ b_lid ‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ c_lid ‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ d_lid ‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ e_lid ‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ f_lid ‚îÇ ‚îÇ ‚îî‚îÄ‚îÄ g_lid ‚îÇ ‚îî‚îÄ‚îÄ trunking/ ‚îÇ ‚îú‚îÄ‚îÄ a_trunking ‚îÇ ‚îú‚îÄ‚îÄ b_trunking ‚îÇ ‚îú‚îÄ‚îÄ c_trunking ‚îÇ ‚îú‚îÄ‚îÄ d_trunking ‚îÇ ‚îú‚îÄ‚îÄ e_trunking ‚îÇ ‚îú‚îÄ‚îÄ f_trunking ‚îÇ ‚îú‚îÄ‚îÄ g_trunking ‚îÇ ‚îú‚îÄ‚îÄ main_controller_lid ‚îÇ ‚îî‚îÄ‚îÄ main_controller_base ‚îú‚îÄ‚îÄ z_bed/ ‚îÇ ‚îú‚îÄ‚îÄ stepper_assembly/ ‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ z_thrust_bearing_spacer_r ‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ z_thrust_bearing_spacer_l ‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ thrust_bearing_casing_r ‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ thrust_bearing_casing_l ‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ 8mm_stepper_spacer_bottom_r ‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ 8mm_stepper_spacer_bottom_l ‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ stepper_mount_r ‚îÇ ‚îÇ ‚îî‚îÄ‚îÄ stepper_mount_l ‚îÇ ‚îú‚îÄ‚îÄ heating_bed/ ‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ center_adjust_knob ‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ bed_center_adjust_disc ‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ bed_frame_legs/ ‚îÇ ‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ bed_wheel_turn_handle_1 ‚îÇ ‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ bed_wheel_turn_handle_2 ‚îÇ ‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ bed_wheel_turn_handle_3 ‚îÇ ‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ bed_wheel_turn_handle_4 ‚îÇ ‚îÇ ‚îÇ ‚îî‚îÄ‚îÄ heater_bed_cable_guide ‚îÇ ‚îÇ ‚îî‚îÄ‚îÄ frame_brackets/ ‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ bed_frame_front_right_bracket ‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ bed_frame_front_left_bracket ‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ bed_frame_rear_right_bracket ‚îÇ ‚îÇ ‚îî‚îÄ‚îÄ bed_frame_rear_left_bracket ‚îÇ ‚îî‚îÄ‚îÄ brackets/ ‚îÇ ‚îú‚îÄ‚îÄ bed_alignment_bracket ‚îÇ ‚îú‚îÄ‚îÄ top_support_bracket_1 ‚îÇ ‚îú‚îÄ‚îÄ top_support_bracket_2 ‚îÇ ‚îú‚îÄ‚îÄ 12mm_z_rod_bottom_bracket_1 ‚îÇ ‚îú‚îÄ‚îÄ 12mm_z_rod_bottom_bracket_2 ‚îÇ ‚îú‚îÄ‚îÄ 12mm_z_rod_bottom_bracket_3 ‚îÇ ‚îú‚îÄ‚îÄ 12mm_z_rod_bottom_bracket_4 ‚îÇ ‚îú‚îÄ‚îÄ 12mm_z_rod_top_bracket_1 ‚îÇ ‚îú‚îÄ‚îÄ 12mm_z_rod_top_bracket_2 ‚îÇ ‚îú‚îÄ‚îÄ 12mm_z_rod_top_bracket_3 ‚îÇ ‚îú‚îÄ‚îÄ 12mm_z_rod_top_bracket_4 ‚îÇ ‚îú‚îÄ‚îÄ z_bottom_shield_bracket_1 ‚îÇ ‚îú‚îÄ‚îÄ z_bottom_shield_bracket_2 ‚îÇ ‚îú‚îÄ‚îÄ z_top_shield_bracket_1 ‚îÇ ‚îú‚îÄ‚îÄ z_top_shield_bracket_2 ‚îÇ ‚îú‚îÄ‚îÄ 12mm_bearing_bracket_1 ‚îÇ ‚îú‚îÄ‚îÄ 12mm_bearing_bracket_2 ‚îÇ ‚îú‚îÄ‚îÄ 12mm_bearing_bracket_3 ‚îÇ ‚îî‚îÄ‚îÄ 12mm_bearing_bracket_4 ‚îú‚îÄ‚îÄ bottom/ ‚îÇ ‚îú‚îÄ‚îÄ frame_brackets/ ‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ inner_corner_support_1 ‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ inner_corner_support_2 ‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ inner_corner_support_3 ‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ inner_corner_support_4 ‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ bottom_frame_bracket_r1 ‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ bottom_frame_bracket_r2 ‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ bottom_frame_bracket_l1 ‚îÇ ‚îÇ ‚îî‚îÄ‚îÄ bottom_frame_bracket_l2 ‚îÇ ‚îî‚îÄ‚îÄ anti_vibration_feet/ ‚îÇ ‚îî‚îÄ‚îÄ anti_vibration_foot (x4) ‚îî‚îÄ‚îÄ top/ ‚îú‚îÄ‚îÄ runout_sensor_bracket ‚îú‚îÄ‚îÄ printer_name_tag ‚îú‚îÄ‚îÄ cwe3d_name_tag/ ‚îÇ ‚îú‚îÄ‚îÄ cwe3d_name_tag_r ‚îÇ ‚îî‚îÄ‚îÄ cwe3d_name_tag_l ‚îú‚îÄ‚îÄ led_base_bracket_l ‚îú‚îÄ‚îÄ led_base_bracket_r ‚îú‚îÄ‚îÄ 4mm_stepper_spacer_top_r ‚îú‚îÄ‚îÄ gantry/ ‚îÇ ‚îú‚îÄ‚îÄ belt_clips/ ‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ 6mm_gt2_belt_clip_1 ‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ 6mm_gt2_belt_clip_2 ‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ 6mm_gt2_belt_clip_3 ‚îÇ ‚îÇ ‚îî‚îÄ‚îÄ 6mm_gt2_belt_clip_4 ‚îÇ ‚îú‚îÄ‚îÄ pulley_caps/ ‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ y_block_pully_caps_r ‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ y_block_pully_caps_l ‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ pulley_caps_1 ‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ pulley_caps_2 ‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ pulley_caps_3 ‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ pulley_caps_4 ‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ pulley_caps_5 ‚îÇ ‚îÇ ‚îî‚îÄ‚îÄ pulley_caps_6 ‚îÇ ‚îú‚îÄ‚îÄ shoulder_caps/ ‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ 8mm_rod_end_caps_1 ‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ 8mm_rod_end_caps_2 ‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ 8mm_rod_end_caps_3 ‚îÇ ‚îÇ ‚îî‚îÄ‚îÄ 8mm_rod_end_caps_4 ‚îÇ ‚îú‚îÄ‚îÄ tensioners/ ‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ tensioner_pully_rr ‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ tensioner_pully_fr ‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ tensioner_pully_rl ‚îÇ ‚îÇ ‚îî‚îÄ‚îÄ tensioner_pully_fl ‚îÇ ‚îú‚îÄ‚îÄ extruder_assembly/ ‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ terminal_block_cover ‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ terminal_box ‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ part_cooling_blower_duct ‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ terminal_base_bracket ‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ h2_extruder_bracket ‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ 5015_blower_fan_bracket ‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ 8mm_x_rod_bearing_block ‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ y_bearing_block_l ‚îÇ ‚îÇ ‚îî‚îÄ‚îÄ y_bearing_block_r ‚îÇ ‚îú‚îÄ‚îÄ 12mm_y_rod_bracket/ ‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ y_rod_bracket_r/ ‚îÇ ‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ cover_1 ‚îÇ ‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ cover_2 ‚îÇ ‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ bracket_1 ‚îÇ ‚îÇ ‚îÇ ‚îî‚îÄ‚îÄ bracket_2 ‚îÇ ‚îÇ ‚îî‚îÄ‚îÄ y_rod_bracket_l/ ‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ cover_3 ‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ cover_4 ‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ bracket_3 ‚îÇ ‚îÇ ‚îî‚îÄ‚îÄ bracket_4 ‚îÇ ‚îú‚îÄ‚îÄ probe_bracket ‚îÇ ‚îî‚îÄ‚îÄ gantry_harness_guide_back ‚îú‚îÄ‚îÄ frame_brackets/ ‚îÇ ‚îú‚îÄ‚îÄ top_front_left_bracket ‚îÇ ‚îú‚îÄ‚îÄ top_front_right_bracket ‚îÇ ‚îú‚îÄ‚îÄ top_nema17_left_bracket ‚îÇ ‚îî‚îÄ‚îÄ top_nema17_right_bracket ‚îî‚îÄ‚îÄ inner_support_align_brackets/ ‚îú‚îÄ‚îÄ inner_support_align_bracket_l_1 ‚îú‚îÄ‚îÄ inner_support_align_bracket_l_2 ‚îú‚îÄ‚îÄ inner_support_align_bracket_l_3 ‚îú‚îÄ‚îÄ inner_support_align_bracket_l_4 ‚îú‚îÄ‚îÄ inner_support_align_bracket_r_1 ‚îú‚îÄ‚îÄ inner_support_align_bracket_r_2 ‚îú‚îÄ‚îÄ inner_support_align_bracket_r_3 ‚îî‚îÄ‚îÄ inner_support_align_bracket_r_4 ","lister-3d-printer-parts-directory#Lister 3D Printer Parts Directory":"Lister 3D Printer Parts Directory"},"title":"Printable Parts Directory"},"/documents/specifications/":{"data":{"additional-features#Additional Features":" Filament Runout Sensor: Included Sensorless Homing: Full axis XYZ homing without physical end-stops Upgradability: Frame designed to accommodate future enhancements Open Source: Full access to CAD files, firmware, and documentation Noise Level: Quiet operation with noticeable but elegant stepper coil humming ","cwe3d-lister-3d-printer-specifications#CWE3D Lister 3D Printer Specifications":"CWE3D Lister 3D Printer Specifications","electrical-system#Electrical System":" Controller Board: Bigtreetech SKR Pro V1.2 32-bit ARM Cortex-M4 processor with 256KB of RAM TMC 2209 silent stepper drivers Multiple safeguard measures 16 GB SD card Power Supply: 24V Mean Well power supply (350W) LRS-350-24 Stepper Motors: 4x Wantai Nema 17 (42BYGHM810) 0.9 degree 2.4A Raspberry Pi: 3B+/4/5 1GB/2GB version with 32GB SD Card Additional Components: 24V to 5V 5A stepdown for Raspberry Pi Fotek SSR-25 DA Solid State Relay AC/DC for 250W bed heating pad 3mm Aluminum electrical panel backplate 450mm x 410mm 48 point terminal block 600V 15A patch panel IEC Socket + Switch (With replaceable fuse cartridge) LED print surface spotlight Wiring: Full wiring solder connections, hidden for aesthetics Electrical Trunking: Fully enclosed system for wire organization ","extruder-and-hot-end#Extruder and Hot End":" Extruder: Bigtreetech H2 V2S Direct Drive Extruder Extrusion Method: Dual Gear Extrusion Maximum Printing Temperature: 270¬∞C (Upgradable) Weight: 198g (excluding wiring) Maximum Extrusion Force: 770 N (approximately 7.5 kg) Filament Diameter and Tolerance: 1.75 ¬± 0.05 mm Extrusion Speed: Up to 600 mm¬≥/min or 10 mm¬≥/s (depending on filament type) See more detail Nozzle: 0.5mm Hardened Steel Nozzle We recently decided to make our current previous 0.6mm nozzle default to 0.5mm Please see specifics on print speeds and nozzle here Cooling: 5015 24V part cooling blower ","filament-compatibility#Filament Compatibility":" Optimized for filaments that: Don‚Äôt require a heated chamber Are less prone to warping Don‚Äôt need bed temperatures exceeding 90¬∞C Compatible Filaments: PLA variants (Standard, PLA+, filled PLAs, specialty PLAs) PETG and its variants (including CF and GF reinforced) TPU/TPE (up to 95A hardness) PVA (for soluble supports) PCTG Some low-warp nylon blends Various specialty and bio-based filaments ","frame-and-construction#Frame and Construction":" Frame Type: CoreXY system Frame Material: Aluminum profile PG2020/40 Assembly: Simple assembly and disassembly Fasteners: Over 400 quality stainless steel screws (M3, M4, M5, M6) Additional Features: Anti-vibration feet Chromed steel T-nuts Open frame design for easy access and maintenance ","gantry-system#Gantry System":" Belt System: GT2 6mm belt drive Pulleys: GT2 idler pulley 20 teeth 14x pulley alignment system Simple belt tensioners Linear Motion: Linear Rod Bearing (8mm) LM8LUU 8mm hardened chromium steel rods Homing: Sensorless homing on all axes (X, Y, Z) ","general-specifications#General Specifications":" Specification Value Weight 23kg Default Max Acceleration 2500 mm/s¬≤ Default Max Velocity 300 mm/s Printable Area 250mm x 250mm x 240mm Dimensions Height: 577mm\nWidth: 460mm\nLength: 520mm ","print-bed#Print Bed":" Bed Size: 250mm x 250mm x 240mm (h) Bed Material: 300mm x 300mm Super flat Garolite F4 base Bed Construction: 300mm x 300mm bed insulation PG2020 construction 1.5mm aluminum heat spreader 260 x 260mm insulation Bed Flatness: Can be as flat as 0.14mm on lowest and highest point Heating: 250W 250mm x 250mm isolated silicone heat pad 80¬∞C max heated bed surface (magnet starts degrading over 85¬∞C) Print Surface: PEI flexible bed printing surface with rough texture Bed Leveling: 8mm bed level induction probe 4x aluminum level adjustment wheels with Silicone Heater Bed Standoff Center level adjustment wheel Auto bed leveling with bed mesh measuring and dynamic bed probing ","printer-components-materials#Printer Components Materials":" eSun ePLA-ST for most parts eSun PETG for black back panels Bamboo Labs PETG-CF for brackets eSun TPU 95A for anti-vibration feet This comprehensive specification list covers all the key aspects of the CWE3D Lister 3D Printer, highlighting its unique features and capabilities.\nParts LayoutComplete directory of all printer parts and their locations. Getting StartedNew to Lister? Start here with our comprehensive setup guide. H2 ExtruderLearn about the H2 extruder specifications and setup. ","software-and-control#Software and Control":" Operating System: RatOS (Raspberry Pi based) Firmware: Klipper with Mainsail interface Lister Plugins: Lister printables (all updated printer parts) Lister config (all firmware and macros) Lister control (numpad shortcut control) User Interface: Web interface and Mobile/Tablet interface ","z-axis-system#Z-Axis System":" Z-Axis Motion: Dual ballscrew system 2x Ballscrew bearing SFU 1204 (12mm w/ 4mm pitch) 350mm long stainless steel Z-Axis Support: 4x 12mm hardened chromium linear rod system 5-6mm thickness base bed plate connecting 12mm rod brackets to bed Coupler: 5mm to 8mm aluminum flexible clamp coupler with single roller bearing pivot Additional Features: Stepper supported Z thrust bearings decreasing stress from stepper bearings "},"title":"Specifications"},"/documents/terminology/":{"data":{"definition#Definition":"Volumetric_Speed [mm¬≥/s]: The rate at which a volume of material is extruded or processed by a 3D printer in a given time.\nmm¬≥: Cubic millimeters (unit of volume) /s: Per second (time unit) ","example#Example":"If your printer‚Äôs volumetric speed is set to 15 mm¬≥/s:\nIt could extrude a 2.5 mm x 2.5 mm x 2.5 mm cube of material each second Or a filament strand 15 mm long with a 1 mm¬≤ cross-section every second Understanding volumetric speed helps in optimizing print settings for speed and quality in 3D printing projects.\nIntroductionLearn about the Lister 3D printer‚Äôs design philosophy and features. Getting StartedNew to Lister? Start here with our comprehensive setup guide. SpecificationsDetailed technical specifications of the Lister 3D printer. ","practical-application#Practical Application":" Higher volumetric speed generally means faster printing. It‚Äôs influenced by factors like nozzle diameter, layer height, and print speed. Optimal settings depend on your printer‚Äôs capabilities and the specific filament being used. ","understanding-volumetric-speed-in-3d-printing#Understanding Volumetric Speed in 3D Printing":"Understanding Volumetric Speed in 3D Printing","visualization#Visualization":"Imagine tiny cubes of filament, each 1 mm x 1 mm x 1 mm (1 mm¬≥), being extruded through the printer nozzle:\nIf Volumetric_Speed = 10 mm¬≥/s, the printer extrudes 10 of these tiny cubes every second. In 3D printing terms, this could be visualized as a thin ‚Äúspaghetti‚Äù of plastic being pushed out continuously. "},"title":"Terminology"},"/documents/trouble_shooting/":{"data":{"most-common-issues#Most Common Issues":"Wet Filament https://www.simplify3d.com/resources/print-quality-troubleshooting/\nGetting StartedNew to Lister? Start here with our comprehensive setup guide. SpecificationsDetailed technical specifications of the Lister 3D printer. Klipper SetupSet up and configure Klipper firmware. ","trouble-shooting#Trouble-shooting":"Trouble-shootingThis guide will outline all common issues and how to fix them."},"title":"Troubleshooting"}}